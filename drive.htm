<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=yes, user-scalable=yes">
	<title>Drive</title>
 	<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>	
	 <script src="https://apis.google.com/js/api.js"></script>
	</head>
<body>
<script>

 var data=[
    ["Item", "Cost", "Stocked", "Ship Date"],
    ["Wheel", "$20.50", "4", "3/1/2016"],
    ["Door", "$15", "2", "3/15/2016"],
    ["Engine", "$100", "1", "30/20/2016"],
    ["Totals", "=SUM(B2:B4)", "=SUM(C2:C4)", "=MAX(D2:D4)"]
  	];


//SaveSpreadsheet("10MmgXFUlqMgJ0Ijkw7HiKhS2zBlv_T6CX-THK5o163U",data);

GetSpreadsheet(true,function(id, name) {	trace (id,name)	} );
//https://viseyes.org/visualeyes/drive.htm
 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GOOGLE DRIVE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var gdClientId="453812393680-8tb3isinl1bap0vqamv45cc5d9c7ohai.apps.googleusercontent.com";		// Google client id
var gdScope="https://www.googleapis.com/auth/drive";											// Scope of access
var gdKey="AIzaSyD0jrIlONfTgL-qkfnMTNdjizsNbLBBjTk";											// Google API key

function SaveSpreadsheet(id, data)															// CLEAR AND SAVE DATA TO GDRIVE
{
		gapi.load('client:auth2', function() {
			gapi.client.init({																	// Init
          	apiKey: gdKey, clientId: gdClientId, scope:gdScope,									// Params
          	discoveryDocs:["https://sheets.googleapis.com/$discovery/rest?version=v4"],			// API discovery
        	}).then(function () {																// When initted, listen for sign-in state changes.
	        	gapi.auth2.getAuthInstance().isSignedIn.listen(doIt);							// Try						
        		doIt(gapi.auth2.getAuthInstance().isSignedIn.get());							// Try
	
				function doIt(isSignedIn) {														// Do action
					if (!isSignedIn) 															// If not signed in yet														
						gapi.auth2.getAuthInstance().signIn();									// Sign in
					else{																		// Clear and save
						var params= { spreadsheetId:id, range: "A1:ZZZ100000" };				// Where to save it
						var body= { majorDimension: "ROWS", values: data };						// Data to save
						var request=gapi.client.sheets.spreadsheets.values.clear(params);		// Clear first
						request.then(function(r) { 												// When cleared
							params.valueInputOption="RAW";										// Send raw data
							var request=gapi.client.sheets.spreadsheets.values.update(params,body);	// Send new data
							request.then(function(r) {											// Good save
								Sound("ding");													// Ding
								PopUp("Project<br>copied to Google Drive");						// Show popup
								}, 
								function(e) { trace(e.result.error.message); })					// Error reporting for send
							}, 
						function(e) { trace(e.result.error.message); });						// Error reporting for clear
						}
				}			
			});
		});
}	

function GetSpreadsheet(allFiles, callback)													// RUN GDRIVE PICKER
{
	var oauthToken,pickerApiLoaded=false;
	gapi.load('auth', { callback: function() {													// LOAD AUTH
		window.gapi.auth.authorize({															// Authorize
				apiKey: gdKey, client_id: gdClientId, scope:gdScope,immediate: false },			// Params
				function(authResult) {															// On auth return
					if (authResult && !authResult.error) {										// If OK
						oauthToken=authResult.access_token;										// Set token
						createPicker();															// Create picker
						}
				});																				// End auth.authorize()
			}																					// End callback()
		});																						// End auth()
		
	gapi.load('picker', {'callback': function() {												// LOAD PICKER							
			pickerApiLoaded=true;																// Set flag
			createPicker();																		// Create picker
			}
		});
	
	function createPicker() {																	// CREATE GDRIVE PICKER
		if (pickerApiLoaded && oauthToken) {													// If loaded and authed
			var view=new google.picker.DocsView(google.picker.ViewId.SPREADSHEETS).				// Make view
			setOwnedByMe(allFiles).setIncludeFolders(true);										// Params
			var picker=new google.picker.PickerBuilder().										// Make picker
				addView(view).setOAuthToken(oauthToken).										// Params
				setDeveloperKey(gdKey).setCallback(pickerCallback).build();						// Do it
			picker.setVisible(true);															// Show picker
			}
		}

	function pickerCallback(data) {																// FILE CHOSEN CALLBACK
		if (data[google.picker.Response.ACTION] == google.picker.Action.PICKED) {				// If picked
			var doc=data[google.picker.Response.DOCUMENTS][0];									// Get doc
			callback(doc.id,doc.name);															// Return name and id
			}
		}
}																								// End closure



function Download(id, callback)														// DOWNLOAD DATA FROM GDRIVE
{
	var request = gapi.client.drive.files.get({ 'fileId': id });				// Request file
	request.execute(function(resp) {											// Get data
		if (resp.downloadUrl) {													// If a link
		    var accessToken=gapi.auth.getToken().access_token;					// Get access token
		    var xhr=new XMLHttpRequest();										// Ajax
		    xhr.open("GET",resp.downloadUrl);									// Set open url
		    xhr.setRequestHeader('Authorization', 'Bearer ' + accessToken);		// Set header
		    xhr.onload = function()  {  callback(xhr.responseText);   };		// On load
		    xhr.send();															// Do it
		  	}
		});
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HELPERS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function trace(msg, p1, p2, p3, p4)										// CONSOLE 
	{
		if (p4 != undefined)
			console.log(msg,p1,p2,p3,p4);
		else if (p3 != undefined)
			console.log(msg,p1,p2,p3);
		else if (p2 != undefined)
			console.log(msg,p1,p2);
		else if (p1 != undefined)
			console.log(msg,p1);
		else
			console.log(msg);
	}


</script>
</body>
</html>